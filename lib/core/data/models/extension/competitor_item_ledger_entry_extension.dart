import 'package:salesforce/core/utils/date_extensions.dart';
import 'package:salesforce/core/utils/helpers.dart';
import 'package:salesforce/realm/scheme/transaction_schemas.dart';

extension CompetitorItemLedgerEntryExtension on CompetitorItemLedgerEntry {
  static CompetitorItemLedgerEntry fromMap(Map<String, dynamic> item) {
    return CompetitorItemLedgerEntry(
      Helpers.toStrings(item['entry_no']),
      appId: Helpers.toStrings(item['entry_no']),
      scheduleId: Helpers.toStrings(item['schedule_id']),
      shipToCode: item['ship_to_code'] as String?,
      itemNo: item['item_no'] as String?,
      competitorNo: item['competitor_no'] as String?,
      competitorName: item['competitor_name'] as String?,
      competitorName2: item['competitor_name_2'] as String?,
      customerNo: item['customer_no'] as String?,
      customerName: item['customer_name'] as String?,
      customerName2: item['customer_name_2'] as String?,
      variantCode: item['variant_code'] as String?,
      itemDescription: item['item_description'] as String?,
      itemDescription2: item['item_description_2'] as String?,
      countingDate: DateTimeExt.parse(item['counting_date'] ?? "").toDateString(),
      description: item['description'] as String?,
      description2: item['description_2'] as String?,
      quantity: Helpers.toDouble(item['quantity']),
      quantityBase: Helpers.toDouble(item['quantity_base']),
      plannedQuantity: Helpers.toDouble(item['planned_quantity']),
      plannedQuantityBase: Helpers.toDouble(item['planned_quantity_base']),
      volumeSalesQuantity: Helpers.toDouble(item['volume_sales_quantity']),
      volumeSalesQuantityBase: Helpers.toDouble(item['volume_sales_quantity_base']),
      unitOfMeasureCode: item['unit_of_measure_code'] as String?,
      volumeSalesQuantityUom: Helpers.toDouble(item['volume_sales_quantity_uom']),
      qtyPerUnitOfMeasure: Helpers.toDouble(item['qty_per_unit_of_measure']),
      volumeSalesQuantityMeasure: Helpers.toDouble(item['volume_sales_quantity_measure']),
      serialNo: item['serial_no'] as String?,
      lotNo: item['lot_no'] as String?,
      warrantyDate: DateTimeExt.parse(item['warranty_date'] ?? "").toDateString(),
      expirationDate: DateTimeExt.parse(item['expiration_date'] ?? "").toDateString(),
      status: item['status'] as String?,
      unitCost: Helpers.toDouble(item['unit_cost']),
      unitPrice: Helpers.toDouble(item['unit_price']),
      unitPriceLcy: Helpers.toDouble(item['unit_price_lcy']),
      vatCalculationType: item['vat_calculation_type'] as String?,
      vatPercentage: Helpers.toDouble(item['vat_percentage']),
      vatBaseAmount: Helpers.toDouble(item['vat_base_amount']),
      vatAmount: Helpers.toDouble(item['vat_amount']),
      discountPercentage: Helpers.toDouble(item['discount_percentage']),
      discountAmount: Helpers.toDouble(item['discount_amount']),
      amount: Helpers.toDouble(item['amount']),
      amountLcy: Helpers.toDouble(item['amount_lcy']),
      amountIncludingVat: Helpers.toDouble(item['amount_including_vat']),
      amountIncludingVatLcy: Helpers.toDouble(item['amount_including_vat_lcy']),
      currencyCode: item['currency_code'] as String?,
      currencyFactor: Helpers.toDouble(item['currency_factor']),
      priceIncludeVat: Helpers.toDouble(item['price_include_vat']),
      remark: item['remark'] as String?,
      isSync: "Yes",
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'entry_no': entryNo,
      'app_id': appId,
      'schedule_id': scheduleId,
      'ship_to_code': shipToCode,
      'item_no': itemNo,
      'competitor_no': competitorNo,
      'competitor_name': competitorName,
      'competitor_name_2': competitorName2,
      'customer_no': customerNo,
      'customer_name': customerName,
      'customer_name_2': customerName2,
      'variant_code': variantCode,
      'item_description': itemDescription,
      'item_description_2': itemDescription2,
      'counting_date': countingDate,
      'description': description,
      'description_2': description2,
      'quantity': quantity,
      'quantity_base': quantityBase,
      'planned_quantity': plannedQuantity,
      'planned_quantity_base': plannedQuantityBase,
      'volume_sales_quantity': volumeSalesQuantity,
      'volume_sales_quantity_base': volumeSalesQuantityBase,
      'unit_of_measure_code': unitOfMeasureCode,
      'volume_sales_quantity_uom': volumeSalesQuantityUom,
      'qty_per_unit_of_measure': qtyPerUnitOfMeasure,
      'volume_sales_quantity_measure': volumeSalesQuantityMeasure,
      'serial_no': serialNo,
      'lot_no': lotNo,
      'warranty_date': warrantyDate,
      'expiration_date': expirationDate,
      'status': status,
      'unit_cost': unitCost,
      'unit_price': unitPrice,
      'unit_price_lcy': unitPriceLcy,
      'vat_calculation_type': vatCalculationType,
      'vat_percentage': vatPercentage,
      'vat_base_amount': vatBaseAmount,
      'vat_amount': vatAmount,
      'discount_percentage': discountPercentage,
      'discount_amount': discountAmount,
      'amount': amount,
      'amount_lcy': amountLcy,
      'amount_including_vat': amountIncludingVat,
      'amount_including_vat_lcy': amountIncludingVatLcy,
      'currency_code': currencyCode,
      'currency_factor': currencyFactor,
      'price_include_vat': priceIncludeVat,
      'remark': remark,
    };
  }
}
