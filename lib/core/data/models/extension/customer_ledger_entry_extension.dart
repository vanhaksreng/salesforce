import 'package:salesforce/core/enums/enums.dart';
import 'package:salesforce/core/utils/helpers.dart';
import 'package:salesforce/realm/scheme/transaction_schemas.dart';

extension CustomerLedgerEntryExtension on CustomerLedgerEntry {
  static CustomerLedgerEntry fromMap(Map<String, dynamic> item) {
    return CustomerLedgerEntry(
      Helpers.toStrings(item['entry_no']),
      customerName: item['customer_name'] as String?,
      customerName2: item['customer_name_2'] ?? "",
      postingDate: item['posting_date'] as String?,
      postingDescription: item['posting_description'] as String?,
      documentDate: item['document_date'] as String?,
      documentType: item['document_type'] as String?,
      documentNo: item['document_no'] as String?,
      description: item['description'] as String?,
      currencyCode: item['currency_code'] as String?,
      currencyFactor: Helpers.formatNumberDb(item['currency_factor'] ?? 1),
      arPostingGroup: item['ar_posting_group'] as String?,
      salespersonCode: item['salesperson_code'] as String?,
      distributorCode: item['distributor_code'] as String?,
      storeCode: item['store_code'] as String?,
      divisionCode: item['division_code'] as String?,
      businessUnitCode: item['business_unit_code'] as String?,
      departmentCode: item['department_code'] as String?,
      territoryCode: item['territory_code'] as String?,
      projectCode: item['project_code'] as String?,
      budgetCode: item['budget_code'] as String?,
      customerNo: item['customer_no'] as String?,
      customerGroupCode: item['customer_group_code'] as String?,
      appliesToDocType: item['applies_to_doc_type'] as String?,
      appliesToDocNo: item['applies_to_doc_no'] as String?,
      dueDate: item['due_date'] as String?,
      pmtDiscountDate: item['pmt_discount_date'] as String?,
      pmtDiscountPercentage: Helpers.formatNumberDb(item['pmt_discount_percentage'] ?? 0),
      pmtDiscountAmount: Helpers.formatNumberDb(item['pmt_discount_amount'] ?? 0, option: FormatType.amount),
      appliesToId: item['applies_to_id'] as String?,
      journalBatchName: item['journal_batch_name'] as String?,
      externalDocumentNo: item['external_document_no'] as String?,
      amountToApply: Helpers.formatNumberDb(item['amount_to_apply'], option: FormatType.amount),
      amountToApplyLcy: Helpers.formatNumberDb(item['amount_to_apply_lcy'], option: FormatType.amount),
      amountToDiscount: Helpers.formatNumberDb(item['amount_to_discount'], option: FormatType.percentage),
      amount: Helpers.formatNumberDb(item['amount'], option: FormatType.amount),
      amountToDiscountLcy: Helpers.formatNumberDb(item['amount_to_discount_lcy'], option: FormatType.amount),
      amountLcy: Helpers.formatNumberDb(item['amount_lcy'], option: FormatType.amount),
      remainingAmount: Helpers.formatNumberDb(item['remaining_amount'], option: FormatType.amount),
      remainingAmountLcy: Helpers.formatNumberDb(item['remaining_amount_lcy'], option: FormatType.amount),
      balAccountType: item['bal_account_type'] as String?,
      balAccountNo: item['bal_account_no'] as String?,
      reversed: item['reversed'] as String?,
      reversedByEntryNo: item['reversed_by_entry_no'] as String?,
      reversedEntryNo: item['reversed_entry_no'] as String?,
      adjustment: item['adjustment'] as String?,
      orderNo: item['order_no'] as String?,
      orderType: item['order_type'] as String?,
      sourceType: item['source_type'] as String?,
      sourceNo: item['source_no'] as String?,
      specialType: item['special_type'] as String?,
      specialTypeNo: item['special_type_no'] as String?,
      postingDatetime: item['posting_datetime'] as String?,
      paymentMethodCode: item['payment_method_code'] as String?,
      customerAddress: item['customer_address'] as String?,
      isCollection: item['is_collection'] as String?,
      index: item['index'] as String?,
      overAging: item['over_aging'] as String?,
    );
  }
}
