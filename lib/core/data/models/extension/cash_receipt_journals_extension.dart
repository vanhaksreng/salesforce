import 'package:salesforce/core/enums/enums.dart';
import 'package:salesforce/core/utils/date_extensions.dart';
import 'package:salesforce/core/utils/helpers.dart';
import 'package:salesforce/realm/scheme/transaction_schemas.dart';

extension CashReceiptJournalsExtension on CashReceiptJournals {
  static CashReceiptJournals fromMap(Map<String, dynamic> json) {
    return CashReceiptJournals(
      Helpers.toStrings(json['id']),
      journalType: Helpers.toStrings(json['journal_type']),
      documentDate: DateTimeExt.parse(json['document_date']).toDateString(),
      postingDate: DateTimeExt.parse(json['posting_date']).toDateString(),
      documentType: Helpers.toStrings(json['document_type']),
      documentNo: Helpers.toStrings(json['document_no']),
      customerNo: Helpers.toStrings(json['customer_no']),
      description: Helpers.toStrings(json['description']),
      description2: Helpers.toStrings(json['description_2']),
      postingGroup: Helpers.toStrings(json['posting_group']),
      paymentMethodCode: Helpers.toStrings(json['payment_method_code']),
      amount: Helpers.formatNumberDb(json['amount'], option: FormatType.amount),
      amountLcy: Helpers.formatNumberDb(json['amount_lcy'], option: FormatType.amount),
      discountAmount: Helpers.formatNumberDb(json['discount_amount'], option: FormatType.amount),
      discountAmountLcy: Helpers.formatNumberDb(json['discount_amount_lcy'], option: FormatType.amount),
      balAccountType: Helpers.toStrings(json['bal_account_type']),
      balAccountNo: Helpers.toStrings(json['bal_account_no']),
      currencyCode: Helpers.toStrings(json['currency_code']),
      currencyFactor: Helpers.formatNumberDb(json['currency_factor']),
      genBusPostingGroup: Helpers.toStrings(json['gen_bus_posting_group']),
      genProdPostingGroup: Helpers.toStrings(json['gen_prod_posting_group']),
      externalDocumentNo: Helpers.toStrings(json['external_document_no']),
      postingDescription: Helpers.toStrings(json['posting_description']),
      storeCode: Helpers.toStrings(json['store_code']),
      divisionCode: Helpers.toStrings(json['division_code']),
      businessUnitCode: Helpers.toStrings(json['business_unit_code']),
      departmentCode: Helpers.toStrings(json['department_code']),
      projectCode: Helpers.toStrings(json['project_code']),
      budgetCode: Helpers.toStrings(json['budget_code']),
      salespersonCode: Helpers.toStrings(json['salesperson_code']),
      distributorCode: Helpers.toStrings(json['distributor_code']),
      customerGroupCode: Helpers.toStrings(json['customer_group_code']),
      applyToDocType: Helpers.toStrings(json['apply_to_doc_type']),
      applyToDocNo: Helpers.toStrings(json['apply_to_doc_no']),
      journalBatchName: Helpers.toStrings(json['journal_batch_name']),
      assignToUserId: Helpers.toStrings(json['assign_to_userid']),
      sourceType: Helpers.toStrings(json['source_type']),
      sourceNo: Helpers.toStrings(json['source_no']),
      status: Helpers.toStrings(json['status']),
      appId: Helpers.toStrings(json['app_id']),
      noSeries: Helpers.toStrings(json['no_series']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'journal_type': journalType,
      'no_series': noSeries,
      'document_date': documentDate,
      'posting_date': postingDate,
      'document_type': documentType,
      'document_no': documentNo,
      'customer_no': customerNo,
      'description': description,
      'description_2': description2,
      'posting_group': postingGroup,
      'payment_method_code': paymentMethodCode,
      'amount': amount,
      'amount_lcy': amountLcy,
      'discount_amount': discountAmount,
      'discount_amount_lcy': discountAmountLcy,
      'bal_account_type': balAccountType,
      'bal_account_no': balAccountNo,
      'currency_code': currencyCode,
      'currency_factor': currencyFactor,
      'gen_bus_posting_group': genBusPostingGroup,
      'gen_prod_posting_group': genProdPostingGroup,
      'external_document_no': externalDocumentNo,
      'posting_description': postingDescription,
      'store_code': storeCode,
      'division_code': divisionCode,
      'business_unit_code': businessUnitCode,
      'department_code': departmentCode,
      'project_code': projectCode,
      'budget_code': budgetCode,
      'salesperson_code': salespersonCode,
      'distributor_code': distributorCode,
      'customer_group_code': customerGroupCode,
      'apply_to_doc_type': applyToDocType,
      'apply_to_doc_no': applyToDocNo,
      'journal_batch_name': journalBatchName,
      'assign_to_userid': assignToUserId,
      'source_type': sourceType,
      'source_no': sourceNo,
      'status': status,
      'app_id': appId,
    };
  }
}
