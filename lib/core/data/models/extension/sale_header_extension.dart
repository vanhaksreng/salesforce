import 'package:salesforce/core/data/models/extension/sale_line_extension.dart';
import 'package:salesforce/core/enums/enums.dart';
import 'package:salesforce/core/utils/date_extensions.dart';
import 'package:salesforce/core/utils/helpers.dart';
import 'package:salesforce/realm/scheme/sales_schemas.dart';

extension SalesHeaderExtension on SalesHeader {
  static SalesHeader fromMap(Map<String, dynamic> json) {
    return SalesHeader(
      json['id'] ?? 0,
      no: json['no'] as String? ?? '',
      documentType: json['document_type'] as String? ?? '',
      customerNo: json['customer_no'] as String? ?? '',
      customerName: json['customer_name'] as String? ?? '',
      customerName2: json['customer_name_2'] as String? ?? '',
      customerGroupCode: json['customer_group_code'] as String? ?? '',
      locationCode: json['location_code'] as String? ?? '',
      address: json['address'] as String? ?? '',
      address2: json['address_2'] as String? ?? '',
      shipToName: json['ship_to_name'] as String? ?? '',
      shipToName2: json['ship_to_name_2'] as String? ?? '',
      shipToAddress: json['ship_to_address'] as String? ?? '',
      shipToAddress2: json['ship_to_address_2'] as String? ?? '',
      shipToPhoneNo: json['ship_to_phone_no'] as String? ?? '',
      shipToPhoneNo2: json['ship_to_phone_no_2'] as String? ?? '',
      documentDate: DateTimeExt.parse(json['document_date']).toDateString(),
      postingDate: DateTimeExt.parse(json['posting_date']).toDateString(),
      requestShipmentDate: DateTimeExt.parse(json['request_shipment_date']).toDateString(),
      postingDescription: json['posting_description'] as String? ?? '',
      paymentTermCode: json['payment_term_code'] as String? ?? '',
      paymentMethodCode: json['payment_method_code'] as String? ?? '',
      currencyCode: json['currency_code'] as String? ?? '',
      currencyFactor: Helpers.toDouble(json['currency_factor']),
      priceIncludeVat: json['price_include_vat'] as String? ?? '',
      salespersonCode: json['salesperson_code'] as String? ?? '',
      distributorCode: json['distributor_code'] as String? ?? '',
      storeCode: json['store_code'] as String? ?? '',
      businessUnitCode: json['business_unit_code'] as String? ?? '',
      departmentCode: json['department_code'] as String? ?? '',
      projectCode: json['project_code'] as String? ?? '',
      externalDocumentNo: json['external_document_no'] as String? ?? '',
      sourceType: json['source_type'] as String? ?? '',
      sourceNo: json['source_no'] as String? ?? '',
      status: json['status'] as String? ?? '',
      amount: Helpers.formatNumberDb(json['payment_amount'], option: FormatType.amount),
      orderDate: DateTimeExt.parse(json["order_date"]).toDateString(),
      remark: json["remark"] ?? "",
      appId: json["app_id"] ?? "",
      shipToCode: json["shipment_method_code"] ?? "",
      arPostingGroupCode: json["ar_posting_group_code"] ?? "",
      genBusPostingGroupCode: json["gen_bus_posting_group_code"] ?? "",
      vatBusPostingGroupCode: json["vat_bus_posting_group_code"] ?? "",
      divisionCode: json["distributor_code"] ?? "",
      assignToUserId: json["assign_to_user_id"] ?? "",
      isSync: "Yes",
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'no': no,
      'app_id': appId,
      'document_type': documentType,
      'customer_no': customerNo,
      'customer_name': customerName,
      'customer_name_2': customerName2,
      'customer_group_code': customerGroupCode,
      'location_code': locationCode,
      'address': address,
      'address_2': address2,
      'ship_to_name': shipToName,
      'ship_to_name_2': shipToName2,
      'ship_to_address': shipToAddress,
      'ship_to_address_2': shipToAddress2,
      'ship_to_phone_no': shipToPhoneNo,
      'ship_to_phone_no_2': shipToPhoneNo2,
      'document_date': documentDate,
      'posting_date': postingDate,
      'request_shipment_date': requestShipmentDate,
      'posting_description': postingDescription,
      'payment_term_code': paymentTermCode,
      'payment_method_code': paymentMethodCode,
      'currency_code': currencyCode,
      'currency_factor': currencyFactor,
      'price_include_vat': priceIncludeVat,
      'salesperson_code': salespersonCode,
      'distributor_code': distributorCode,
      'store_code': storeCode,
      'business_unit_code': businessUnitCode,
      'department_code': departmentCode,
      'project_code': projectCode,
      'external_document_no': externalDocumentNo,
      'source_type': sourceType,
      'source_no': sourceNo,
      'status': status,
      'payment_amount': amount,
      'order_date': orderDate,
      'remark': remark,
      'rec_posting_group_code': arPostingGroupCode,
      'vat_posting_group_code': vatBusPostingGroupCode,
      'gen_bus_posting_group_code': genBusPostingGroupCode,
    };
  }

  Map<String, dynamic> toJsonWithLines(List<SalesLine> lines) {
    return {
      'id': id,
      'no': no,
      'app_id': appId,
      'document_type': documentType,
      'customer_no': customerNo,
      'customer_name': customerName,
      'customer_name_2': customerName2,
      'customer_group_code': customerGroupCode,
      'location_code': locationCode,
      'address': address,
      'address_2': address2,
      'ship_to_name': shipToName,
      'ship_to_name_2': shipToName2,
      'ship_to_address': shipToAddress,
      'ship_to_address_2': shipToAddress2,
      'ship_to_phone_no': shipToPhoneNo,
      'ship_to_phone_no_2': shipToPhoneNo2,
      'document_date': documentDate,
      'posting_date': postingDate,
      'request_shipment_date': requestShipmentDate,
      'posting_description': postingDescription,
      'payment_term_code': paymentTermCode,
      'payment_method_code': paymentMethodCode,
      'currency_code': currencyCode,
      'currency_factor': currencyFactor,
      'price_include_vat': priceIncludeVat,
      'salesperson_code': salespersonCode,
      'distributor_code': distributorCode,
      'store_code': storeCode,
      'business_unit_code': businessUnitCode,
      'department_code': departmentCode,
      'project_code': projectCode,
      'external_document_no': externalDocumentNo,
      'source_type': sourceType,
      'source_no': sourceNo,
      'status': status,
      'payment_amount': amount,
      'order_date': orderDate,
      'remark': remark,
      'rec_posting_group_code': arPostingGroupCode,
      'vat_posting_group_code': vatBusPostingGroupCode,
      'gen_bus_posting_group_code': genBusPostingGroupCode,
      'lines': lines.map((line) => line.toJson()).toList(),
    };
  }
}
