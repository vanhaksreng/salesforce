import 'package:salesforce/core/enums/enums.dart';
import 'package:salesforce/core/utils/date_extensions.dart';
import 'package:salesforce/core/utils/helpers.dart';
import 'package:salesforce/realm/scheme/sales_schemas.dart';

extension SalesLineExtension on SalesLine {
  static SalesLine fromMap(Map<String, dynamic> json) {
    return SalesLine(
      json['id'] ?? 0,
      lineNo: Helpers.toInt(json['line_no'] as String? ?? ""),
      documentNo: json['document_no'] as String? ?? '',
      customerNo: json['customer_no'] as String? ?? "",
      no: json['no'] as String? ?? '',
      description: json['description'] as String? ?? '',
      description2: json['description_2'] as String? ?? '',
      quantity: Helpers.formatNumberDb(json['quantity'], option: FormatType.quantity),
      outstandingQuantity: Helpers.formatNumberDb(json['outstanding_quantity'] ?? 0, option: FormatType.quantity),
      outstandingQuantityBase: Helpers.formatNumberDb(
        json['outstanding_quantity_base'] ?? 0,
        option: FormatType.quantity,
      ),
      quantityToShip: Helpers.formatNumberDb(json['quantity_to_ship'] ?? 0, option: FormatType.quantity),
      quantityToInvoice: Helpers.formatNumberDb(json['quantity_to_invoice'] ?? 0, option: FormatType.quantity),
      quantityShipped: Helpers.formatNumberDb(json['quantity_shipped'] ?? 0, option: FormatType.quantity),
      quantityInvoiced: Helpers.formatNumberDb(json['quantity_invoiced'] ?? 0, option: FormatType.quantity),
      discountPercentage: Helpers.toDouble(json['discount_percentage']),
      discountAmount: Helpers.toDouble(json['discount_amount']),
      amount: Helpers.formatNumberDb(json['amount'] ?? 0, option: FormatType.amount),
      amountLcy: Helpers.formatNumberDb(json['amount_lcy'] ?? 0, option: FormatType.amount),
      vatPercentage: Helpers.formatNumberDb(json['vat_percentage'] ?? 0, option: FormatType.percentage),
      vatAmount: Helpers.formatNumberDb(json['vat_amount'] ?? 0, option: FormatType.amount),
      vatBaseAmount: Helpers.formatNumberDb(json['vat_base_amount'] ?? 0, option: FormatType.amount),
      amountIncludingVat: Helpers.formatNumberDb(json['amount_including_vat'] ?? 0, option: FormatType.amount),
      amountIncludingVatLcy: Helpers.formatNumberDb(json['amount_including_vat_lcy'] ?? 0, option: FormatType.amount),
      specialType: json['special_type'] as String? ?? '',
      unitOfMeasure: json['unit_of_measure'] as String? ?? "",
      specialTypeNo: json['special_type_no'] as String? ?? '',
      unitPrice: Helpers.formatNumberDb(json['unit_price'] ?? 0, option: FormatType.price),
      unitPriceLcy: Helpers.formatNumberDb(json['unit_price_lcy'] ?? 0, option: FormatType.price),
      manualUnitPrice: Helpers.formatNumberDb(json['manual_unit_price'] ?? 0, option: FormatType.price),
      unitPriceOri: Helpers.formatNumberDb(json['unit_price_ori'] ?? 0, option: FormatType.price),
      qtyPerUnitOfMeasure: Helpers.formatNumberDb(json['qty_per_unit_of_measure'] ?? 0, option: FormatType.quantity),
      itemCategoryCode: json['item_category_code'] as String? ?? '',
      itemGroupCode: json['item_group_code'] as String? ?? '',
      itemDiscGroupCode: json['item_disc_group_code'] as String? ?? '',
      itemBrandCode: json['item_brand_code'] as String? ?? '',
      storeCode: json['store_code'] as String? ?? '',
      divisionCode: json['division_code'] as String? ?? '',
      businessUnitCode: json['business_unit_code'] as String? ?? '',
      departmentCode: json['department_code'] as String? ?? '',
      projectCode: json['project_code'] as String? ?? '',
      salespersonCode: json['salesperson_code'] as String? ?? '',
      distributorCode: json['distributor_code'] as String? ?? '',
      customerGroupCode: json['customer_group_code'] as String? ?? '',
      currencyCode: json['currency_code'] as String? ?? '',
      currencyFactor: Helpers.toDouble(json['currency_factor']),
      documentDate: DateTimeExt.parse(json["created_at"]).toDateString(),
      requestShipmentDate: DateTimeExt.parse(json["request_shipment_date"]).toDateString(),
      postingGroup: json["posting_group"] ?? "",
      locationCode: json["location_code"] ?? "",
      documentType: json["document_type"] ?? "",
      referLineNo: Helpers.toInt(json["refer_line_no"] ?? 0),
      type: json["type"] ?? "Item",
      genBusPostingGroupCode: json["gen_bus_posting_group_code"] ?? "",
      genProdPostingGroupCode: json["gen_prod_posting_group_code"] ?? "",
      vatProdPostingGroupCode: json["vat_prod_posting_group_code"] ?? "",
      vatBusPostingGroupCode: json["vat_bus_posting_group_code"] ?? "",
      vatCalculationType: json["vat_calculation_type"] ?? "",
      sourceNo: json["source_no"],
      isManualEdit: json["is_manual_edit"] ?? "",
      isSync: "Yes",
      headerId: Helpers.toInt(json["header_id"] ?? 0),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'document_no': documentNo,
      'document_type': documentType,
      'line_no': lineNo,
      'special_type': specialType,
      'special_type_no': specialTypeNo,
      'type': type,
      'refer_line_no': referLineNo,
      'customer_no': customerNo,
      'no': no,
      'description': description,
      'description_2': description2,
      'item_brand_code': itemBrandCode,
      'item_category_code': itemCategoryCode,
      'item_group_code': itemGroupCode,
      'item_disc_group_code': itemDiscGroupCode,
      'posting_group': postingGroup,
      'gen_prod_posting_group_code': genProdPostingGroupCode,
      'vat_prod_posting_group_code': vatProdPostingGroupCode,
      'gen_bus_posting_group_code': genBusPostingGroupCode,
      'vat_bus_posting_group_code': vatBusPostingGroupCode,
      'location_code': locationCode,
      'salesperson_code': salespersonCode,
      'store_code': storeCode,
      'division_code': divisionCode,
      'distributor_code': distributorCode,
      'department_code': departmentCode,
      'business_unit_code': businessUnitCode,
      'project_code': projectCode,
      'request_shipment_date': requestShipmentDate,
      'currency_code': currencyCode,
      'currency_factor': currencyFactor,
      'vat_calculation_type': vatCalculationType,
      'vat_percentage': vatPercentage,
      'unit_of_measure': unitOfMeasure,
      'qty_per_unit_of_measure': qtyPerUnitOfMeasure,
      'quantity': quantity,
      'quantity_to_ship': quantityToShip,
      'quantity_to_invoice': quantityToInvoice,
      'outstanding_quantity': outstandingQuantity,
      'outstanding_quantity_base': outstandingQuantityBase,
      'quantity_invoiced': quantityInvoiced,
      'quantity_shipped': quantityShipped,
      'unit_price': unitPrice,
      'unit_price_ori': unitPriceOri,
      'unit_price_lcy': unitPriceLcy,
      'discount_amount': discountAmount,
      'discount_percentage': discountPercentage,
      'vat_amount': vatAmount,
      'vat_base_amount': vatBaseAmount,
      'amount': amount,
      'amount_lcy': amountLcy,
      'amount_including_vat': amountIncludingVat,
      'amount_including_vat_lcy': amountIncludingVatLcy,
      'manual_unit_price': manualUnitPrice,
      'is_manual_edit': isManualEdit,
      'document_date': documentDate,
      'source_no': sourceNo,
    };
  }
}
