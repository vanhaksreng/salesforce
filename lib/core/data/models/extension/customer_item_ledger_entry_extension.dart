import 'package:salesforce/core/utils/date_extensions.dart';
import 'package:salesforce/core/utils/helpers.dart';
import 'package:salesforce/realm/scheme/transaction_schemas.dart';

extension CustomerItemLedgerEntryExtension on CustomerItemLedgerEntry {
  static CustomerItemLedgerEntry fromMap(Map<String, dynamic> item) {
    return CustomerItemLedgerEntry(
      Helpers.toStrings(item['entry_no']),
      appId: item['app_id'] ?? "",
      scheduleId: Helpers.toStrings(item['schedule_id'] ?? ""),
      shipToCode: item['ship_to_code'] as String? ?? "",
      itemNo: Helpers.toStrings(item['item_no']),
      customerNo: Helpers.toStrings(item['customer_no']),
      customerName: item['customer_name'] as String? ?? "",
      customerName2: item['customer_name_2'] as String? ?? "",
      competitorNo: item['competitor_no'] as String? ?? "",
      competitorName: item['competitor_name'] as String? ?? "",
      competitorName2: item['competitor_name_2'] as String? ?? "",
      variantCode: item['variant_code'] as String? ?? "",
      itemDescription: item['item_description'] as String? ?? "",
      itemDescription2: item['item_description_2'] as String? ?? "",
      countingDate: DateTimeExt.parse(item['counting_date'] ?? "").toDateString(),
      description: item['description'] as String? ?? "",
      description2: item['description_2'] as String? ?? "",
      quantity: Helpers.toDouble(item['quantity'] ?? 0),
      quantityBase: Helpers.toDouble(item['quantity_base'] ?? 0),
      quantityBuyFromOther: Helpers.toDouble(item['quantity_buy_from_other'] ?? 0),
      quantityBuyFromOtherBase: Helpers.toDouble(item['quantity_buy_from_other_base'] ?? 0),
      plannedQuantity: Helpers.toDouble(item['planned_quantity'] ?? 0),
      plannedQuantityBase: Helpers.toDouble(item['planned_quantity_base'] ?? 0),
      plannedQuantityReturn: Helpers.toDouble(item['planned_quantity_return'] ?? 0),
      plannedQuantityReturnBase: Helpers.toDouble(item['planned_quantity_return_base'] ?? 0),
      volumeSalesQuantity: Helpers.toDouble(item['volume_sales_quantity'] ?? 0),
      volumeSalesQuantityBase: Helpers.toDouble(item['volume_sales_quantity_base'] ?? 0),
      focInQuantity: Helpers.toDouble(item['foc_in_quantity'] ?? 0),
      focInQuantityBase: Helpers.toDouble(item['foc_in_quantity_base'] ?? 0),
      focOutQuantity: Helpers.toDouble(item['foc_out_quantity'] ?? 0),
      focOutQuantityBase: Helpers.toDouble(item['foc_out_quantity_base'] ?? 0),
      focInuom: item['foc_in_uom'] as String? ?? "",
      focOutUom: item['foc_out_uom'] as String? ?? "",
      focInMeasure: Helpers.toDouble(item['foc_in_measure'] ?? 0),
      focOutMeasure: Helpers.toDouble(item['foc_out_measure'] ?? 0),
      unitOfMeasureCode: item['unit_of_measure_code'] as String? ?? "",
      quantityBuyFromOtherUom: item['quantity_buy_from_other_uom'] as String? ?? "",
      plannedQuantityUom: item['planned_quantity_uom'] as String? ?? "",
      plannedQuantityReturnUom: item['planned_quantity_return_uom'] as String? ?? "",
      volumeSalesQuantityUom: item['volume_sales_quantity_uom'] as String? ?? "",
      qtyPerUnitOfMeasure: Helpers.toDouble(item['qty_per_unit_of_measure'] ?? 0),
      quantityBuyFromOtherMeasure: Helpers.toDouble(item['quantity_buy_from_other_measure'] ?? 0),
      plannedQuantityMeasure: Helpers.toDouble(item['planned_quantity_measure'] ?? 0),
      plannedQuantityReturnMeasure: Helpers.toDouble(item['planned_quantity_return_measure'] ?? 0),
      volumeSalesQuantityMeasure: Helpers.toDouble(item['volume_sales_quantity_measure'] ?? 0),
      salesPurchaserCode: item['sales_purchaser_code'] as String? ?? "",
      serialNo: item['serial_no'] as String? ?? "",
      lotNo: item['lot_no'] as String? ?? "",
      warrantyDate: DateTimeExt.parse(item['warranty_date'] ?? "").toDateString(),
      expirationDate: DateTimeExt.parse(item['expiration_date'] ?? "").toDateString(),
      unitCost: Helpers.toDouble(item['unit_cost'] ?? 0),
      status: item['status'] as String? ?? "",
      unitPrice: Helpers.toDouble(item['unit_price'] ?? 0),
      unitPriceLcy: Helpers.toDouble(item['unit_price_lcy'] ?? 0),
      vatCalculationType: item['vat_calculation_type'] as String? ?? "",
      vatpercentage: Helpers.toDouble(item['vat_percentage'] ?? 0),
      vatBaseAmount: Helpers.toDouble(item['vat_base_amount'] ?? 0),
      vatAmount: Helpers.toDouble(item['vat_amount'] ?? 0),
      discountPercentage: Helpers.toDouble(item['discount_percentage'] ?? 0),
      discountAmount: Helpers.toDouble(item['discount_amount'] ?? 0),
      amount: Helpers.toDouble(item['amount'] ?? 0),
      amountLcy: Helpers.toDouble(item['amount_lcy'] ?? 0),
      amountIncludingVat: Helpers.toDouble(item['amount_including_vat'] ?? 0),
      amountIncludingVatLcy: Helpers.toDouble(item['amount_including_vat_lcy'] ?? 0),
      returnVatPercentage: Helpers.toDouble(item['return_vat_percentage'] ?? 0),
      returnVatBaseAmount: Helpers.toDouble(item['return_vat_base_amount'] ?? 0),
      returnVatAmount: Helpers.toDouble(item['return_vat_amount'] ?? 0),
      returnDiscountPercentage: Helpers.toDouble(item['return_discount_percentage'] ?? 0),
      returnDiscountAmount: Helpers.toDouble(item['return_discount_amount'] ?? 0),
      returnAmount: Helpers.toDouble(item['return_amount'] ?? 0),
      returnAmountLcy: Helpers.toDouble(item['return_amount_lcy'] ?? 0),
      returnAmountIncludingVat: Helpers.toDouble(item['return_amount_including_vat'] ?? 0),
      returnAmountIncludingVatLcy: Helpers.toDouble(item['return_amount_including_vat_lcy'] ?? 0),
      redemptionQuantity: Helpers.toDouble(item['redemption_quantity'] ?? 0),
      redemptionQuantityBase: Helpers.toDouble(item['redemption_quantity_base'] ?? 0),
      redemptionUom: Helpers.toDouble(item['redemption_uom']),
      redemptionMeasure: Helpers.toDouble(item['redemption_measure'] ?? 0),
      inventory: Helpers.toDouble(item['inventory'] ?? 0),
      inventoryBase: Helpers.toDouble(item['inventory_base'] ?? 0),
      currencyCode: item['currency_code'] as String? ?? "",
      currencyFactor: Helpers.toDouble(item['currency_factor'] ?? 0),
      priceIncludeVat: Helpers.toDouble(item['price_include_vat'] ?? 0),
      documentType: item['document_type'] as String? ?? "",
      documentNo: item['document_no'] as String? ?? "",
      itemCategoryCode: item['item_category_code'] as String? ?? "",
      itemGroupCode: item['item_group_code'] as String? ?? "",
      itemBrandCode: item['item_brand_code'] as String? ?? "",
      storeCode: item['store_code'] as String? ?? "",
      divisionCode: item['division_code'] as String? ?? "",
      businessUnitCode: item['business_unit_code'] as String? ?? "",
      departmentCode: item['department_code'] as String? ?? "",
      projectCode: item['project_code'] as String? ?? "",
      distributorCode: item['distributor_code'] as String? ?? "",
      customerGroupCode: item['customer_group_code'] as String? ?? "",
      territoryCode: item['territory_code'] as String? ?? "",
      remark: item['remark'] as String? ?? "",
      isSync: "Yes",
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'entry_no': entryNo,
      'app_id': appId,
      'schedule_id': scheduleId,
      'ship_to_code': shipToCode,
      'item_no': itemNo,
      'customer_no': customerNo,
      'customer_name': customerName,
      'customer_name_2': customerName2,
      'competitor_no': competitorNo,
      'competitor_name': competitorName,
      'competitor_name_2': competitorName2,
      'variant_code': variantCode,
      'item_description': itemDescription,
      'item_description_2': itemDescription2,
      'counting_date': DateTimeExt.parse(countingDate).toDateString(),
      'description': description,
      'description_2': description2,
      'quantity': quantity,
      'quantity_base': quantityBase,
      'quantity_buy_from_other': quantityBuyFromOther,
      'quantity_buy_from_other_base': quantityBuyFromOtherBase,
      'planned_quantity': plannedQuantity,
      'planned_quantity_base': plannedQuantityBase,
      'planned_quantity_return': plannedQuantityReturn,
      'planned_quantity_return_base': plannedQuantityReturnBase,
      'volume_sales_quantity': volumeSalesQuantity,
      'volume_sales_quantity_base': volumeSalesQuantityBase,
      'foc_in_quantity': focInQuantity,
      'foc_in_quantity_base': focInQuantityBase,
      'foc_out_quantity': focOutQuantity,
      'foc_out_quantity_base': focOutQuantityBase,
      'foc_in_uom': focInuom,
      'foc_out_uom': focOutUom,
      'foc_in_measure': focInMeasure,
      'foc_out_measure': focOutMeasure,
      'unit_of_measure_code': unitOfMeasureCode,
      'quantity_buy_from_other_uom': quantityBuyFromOtherUom,
      'planned_quantity_uom': plannedQuantityUom,
      'planned_quantity_return_uom': plannedQuantityReturnUom,
      'volume_sales_quantity_uom': volumeSalesQuantityUom,
      'qty_per_unit_of_measure': qtyPerUnitOfMeasure,
      'quantity_buy_from_other_measure': quantityBuyFromOtherMeasure,
      'planned_quantity_measure': plannedQuantityMeasure,
      'planned_quantity_return_measure': plannedQuantityReturnMeasure,
      'volume_sales_quantity_measure': volumeSalesQuantityMeasure,
      'sales_purchaser_code': salesPurchaserCode,
      'serial_no': serialNo,
      'lot_no': lotNo,
      'warranty_date': warrantyDate,
      'expiration_date': expirationDate,
      'unit_cost': unitCost,
      'status': status,
      'unit_price': unitPrice,
      'unit_price_lcy': unitPriceLcy,
      'vat_calculation_type': vatCalculationType,
      'vat_percentage': vatpercentage,
      'vat_base_amount': vatBaseAmount,
      'vat_amount': vatAmount,
      'discount_percentage': discountPercentage,
      'discount_amount': discountAmount,
      'amount': amount,
      'amount_lcy': amountLcy,
      'amount_including_vat': amountIncludingVat,
      'amount_including_vat_lcy': amountIncludingVatLcy,
      'return_vat_percentage': returnVatPercentage,
      'return_vat_base_amount': returnVatBaseAmount,
      'return_vat_amount': returnVatAmount,
      'return_discount_percentage': returnDiscountPercentage,
      'return_discount_amount': returnDiscountAmount,
      'return_amount': returnAmount,
      'return_amount_lcy': returnAmountLcy,
      'return_amount_including_vat': returnAmountIncludingVat,
      'return_amount_including_vat_lcy': returnAmountIncludingVatLcy,
      'redemption_quantity': redemptionQuantity,
      'redemption_quantity_base': redemptionQuantityBase,
      'redemption_uom': redemptionUom,
      'redemption_measure': redemptionMeasure,
      'inventory': inventory,
      'inventory_base': inventoryBase,
      'currency_code': currencyCode,
      'currency_factor': currencyFactor,
      'price_include_vat': priceIncludeVat,
      'document_type': documentType,
      'document_no': documentNo,
      'item_category_code': itemCategoryCode,
      'item_group_code': itemGroupCode,
      'item_brand_code': itemBrandCode,
      'store_code': storeCode,
      'division_code': divisionCode,
      'business_unit_code': businessUnitCode,
      'department_code': departmentCode,
      'project_code': projectCode,
      'distributor_code': distributorCode,
      'customer_group_code': customerGroupCode,
      'territory_code': territoryCode,
      'remark': remark,
      'is_sync': isSync,
    };
  }
}
